importScripts("/libs/zip-core.min.js");const GAME_CACHE_NAME="game-cache",HTML_KEY="game.html",IMG_ZIP_KEY="img.zip",CACHE_META_KEY="arc-cache-meta.json",CACHE_SIZE=1500,DECOMPRESSION_CONCURRENCY=16,METADATA_SAVE_DEBOUNCE=5e3;zip.configure({useWebWorkers:!1});class ARCache{constructor(t=1500){this.maxSize=t,this.p=0,this.t1=new Map,this.t2=new Map,this.b1=new Set,this.b2=new Set,this.debouncedSaveMetadata=this._debounce(this.saveMetadata.bind(this),METADATA_SAVE_DEBOUNCE)}get(t){if(this.t1.has(t)){const e=this.t1.get(t);return this.t1.delete(t),this.t2.set(t,e),e}if(this.t2.has(t)){const e=this.t2.get(t);return this.t2.delete(t),this.t2.set(t,e),e}return null}put(t,e){if(this.t1.has(t)||this.t2.has(t)){this.get(t),this.t2.set(t,e),this.debouncedSaveMetadata();return}if(this.b1.has(t)){this.p=Math.min(this.maxSize,this.p+Math.max(this.b2.size/this.b1.size,1)||1),this._replace(t),this.b1.delete(t),this.t2.set(t,e),this.debouncedSaveMetadata();return}if(this.b2.has(t)){this.p=Math.max(0,this.p-Math.max(this.b1.size/this.b2.size,1)||1),this._replace(t),this.b2.delete(t),this.t2.set(t,e),this.debouncedSaveMetadata();return}this.t1.size+this.t2.size>=this.maxSize&&(this.t1.size>this.p?this._evict(this.t1,this.b1):this._evict(this.t2,this.b2)),this.t1.set(t,e),this.debouncedSaveMetadata()}_replace(t){this.t1.size>0&&(this.t1.size>this.p||this.b2.has(t)&&this.t1.size===this.p)?this._evict(this.t1,this.b1):this._evict(this.t2,this.b2)}_evict(t,e){if(t.size===0)return;const i=t.keys().next().value;t.delete(i),e.add(i)}serialize(){return{t2:[...this.t2.keys()],p:this.p}}hydrate(t){return!t||!t.t2?[]:(this.p=t.p||0,t.t2.forEach(e=>this.t2.set(e,null)),console.log(`SW: ARC \u7F13\u5B58\u5DF2\u4ECE\u5143\u6570\u636E\u6062\u590D\u3002T2 \u7ED3\u6784: ${this.t2.size}, p: ${this.p.toFixed(2)}`),t.t2)}_fillPreheatedEntry(t,e){this.t2.has(t)&&this.t2.get(t)===null&&this.t2.set(t,e)}async saveMetadata(){try{const t=await caches.open(GAME_CACHE_NAME),e=this.serialize();if(e.t2.length>0){const i=new Response(JSON.stringify(e),{headers:{"Content-Type":"application/json"}});await t.put(CACHE_META_KEY,i),console.log(`SW: ARC \u7F13\u5B58\u5143\u6570\u636E\u5DF2\u4FDD\u5B58\u3002T2: ${this.t2.size}, p: ${this.p.toFixed(2)}`)}}catch(t){console.error("SW: \u4FDD\u5B58\u7F13\u5B58\u5143\u6570\u636E\u5931\u8D25:",t)}}_debounce(t,e){let i;return function(...n){const r=this;clearTimeout(i),i=setTimeout(()=>t.apply(r,n),e)}}}class RequestThrottler{constructor(t=16){this.concurrencyLimit=t,this.activeCount=0,this.waitingQueue=[]}async execute(t){return new Promise((e,i)=>{this.waitingQueue.push({task:t,resolve:e,reject:i}),this._processQueue()})}_processQueue(){for(;this.activeCount<this.concurrencyLimit&&this.waitingQueue.length>0;){this.activeCount++;const{task:t,resolve:e,reject:i}=this.waitingQueue.shift();t().then(e).catch(i).finally(()=>{this.activeCount--,this._processQueue()})}}}const decompressedCache=new ARCache(CACHE_SIZE),decompressionInProgress=new Map,throttler=new RequestThrottler(DECOMPRESSION_CONCURRENCY);let readyPromise=null,imgZipReaderPromise=null,imgEntriesMapPromise=null;function getImgZipReader(){return imgZipReaderPromise||(imgZipReaderPromise=(async()=>{try{const t=await(await caches.open(GAME_CACHE_NAME)).match(IMG_ZIP_KEY);if(!t)throw new Error("\u6E38\u620F\u56FE\u7247\u5305 (img.zip) \u672A\u5728\u7F13\u5B58\u4E2D\u627E\u5230\u3002");const e=await t.blob();return new self.zip.ZipReader(new self.zip.BlobReader(e))}catch(s){throw imgZipReaderPromise=null,s}})(),imgZipReaderPromise)}function getImgEntriesMap(){return imgEntriesMapPromise||(imgEntriesMapPromise=(async()=>{try{const t=await(await getImgZipReader()).getEntries(),e=new Map;for(const i of t)e.set(i.filename,i);return console.log(`SW: \u6E38\u620F\u56FE\u7247\u5305\u5DF2\u7D22\u5F15 ${e.size} \u4E2A\u6587\u4EF6\u3002`),e}catch(s){throw imgEntriesMapPromise=null,s}})(),imgEntriesMapPromise)}async function getDecompressedBlob(s,t=!1){const e=decompressedCache.get(s);if(e)return e;let i=decompressionInProgress.get(s);if(i)return i;const n=throttler.execute(async()=>{const a=(await getImgEntriesMap()).get(s);if(!a)throw new Error(`File not found: ${s}`);return a.getData(new zip.BlobWriter(self.zip.getMimeType(s)))});decompressionInProgress.set(s,n);try{const r=await n;return t?decompressedCache._fillPreheatedEntry(s,r):decompressedCache.put(s,r),r}finally{decompressionInProgress.delete(s)}}async function preheatCacheFromMetadata(){try{const t=await(await caches.open(GAME_CACHE_NAME)).match(CACHE_META_KEY);if(!t){console.log("SW: \u672A\u627E\u5230\u7F13\u5B58\u5143\u6570\u636E\uFF0C\u8DF3\u8FC7\u9884\u70ED\u3002");return}const e=await t.json(),i=decompressedCache.hydrate(e);if(i.length===0)return;console.log(`SW: \u5F00\u59CB\u9884\u70ED ${i.length} \u4E2A\u9AD8\u9891\u9879\u76EE...`);const n=i.map(a=>getDecompressedBlob(a,!0).catch(o=>{}));await Promise.allSettled(n);const r=Array.from(decompressedCache.t2.values()).filter(a=>a!==null).length;console.log(`SW: \u9884\u70ED\u5B8C\u6210\u3002\u6210\u529F\u586B\u5145: ${r}/${i.length}`)}catch(s){console.error("SW: \u9884\u70ED\u7F13\u5B58\u65F6\u51FA\u9519:",s)}}async function initialize(){console.log("SW: \u6B63\u5728\u521D\u59CB\u5316..."),await getImgEntriesMap(),await preheatCacheFromMetadata(),console.log("SW: \u521D\u59CB\u5316\u5B8C\u6210\uFF0C\u5DF2\u51C6\u5907\u597D\u5904\u7406\u8BF7\u6C42\u3002")}function ensureReady(){return readyPromise||(readyPromise=initialize()),readyPromise}self.addEventListener("install",s=>{s.waitUntil(self.skipWaiting())}),self.addEventListener("activate",s=>{s.waitUntil(self.clients.claim())}),self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;const t=new URL(s.request.url),e=new URL(self.registration.scope);t.pathname.startsWith(e.pathname)&&s.respondWith((async()=>(await ensureReady(),handleFetch(s.request,t,e)))())});async function handleFetch(s,t,e){const i=decodeURIComponent(t.pathname.substring(e.pathname.length));try{if(i===""||i.endsWith(".html"))return await(await caches.open(GAME_CACHE_NAME)).match(HTML_KEY)||new Response("\u6E38\u620FHTML\u6587\u4EF6\u672A\u627E\u5230\u3002",{status:404});const n=await getDecompressedBlob(i,!1),r=self.zip.getMimeType(i);return new Response(n,{headers:{"Content-Type":r}})}catch(n){return n.message.includes("File not found")?(console.error(`SW: \u6587\u4EF6 '${i}' \u672A\u5728 img.zip \u4E2D\u627E\u5230`),new Response("\u5728\u6E38\u620F\u56FE\u7247\u5305\u4E2D\u672A\u627E\u5230\u6587\u4EF6",{status:404})):(console.error(`SW: \u5904\u7406\u6587\u4EF6 ${i} \u65F6\u51FA\u9519:`,n),new Response(`\u5904\u7406\u6587\u4EF6\u65F6\u51FA\u9519: ${n.message}`,{status:500}))}}
